import numpy as np
import matplotlib.pyplot as plt

def compute_induced_velocity(x, y, z, x1, y1, z1, x2, y2, z2, Gamma=1.0, ensure_positive_a=False):
    r1 = np.array([x - x1, y - y1, z - z1])
    r2 = np.array([x - x2, y - y2, z - z2])
    r12 = np.array([x2 - x1, y2 - y1, z2 - z1])
    r1_mag, r2_mag, r12_mag = np.linalg.norm(r1), np.linalg.norm(r2), np.linalg.norm(r12)
    dot_r1_r12 = np.dot(r1, r12)
    dot_r2_r12 = np.dot(r2, r12)
    cos_beta1 = dot_r1_r12 / (r1_mag * r12_mag)
    cos_beta2 = dot_r2_r12 / (r2_mag * r12_mag)
    cross_r1_r2_z = r1[0] * r2[1] - r1[1] * r2[0]
    cross_mag = abs(cross_r1_r2_z)
    if cross_mag < 1e-8:
        return 0.0
    Vz = (Gamma / (4 * np.pi)) * (cross_r1_r2_z / (cross_mag**2)) * (cos_beta2 - cos_beta1)
    return abs(Vz) if ensure_positive_a else Vz

x1, y1, z1 = -1.0, 0.0, 0.0
x2, y2, z2 = 1.0, 0.0, 0.0

x_points_a = np.linspace(-20, 20, 200)
y_a, z_a = 5.0, 0.0
vz_a = [compute_induced_velocity(x, y_a, z_a, x1, y1, z1, x2, y2, z2, ensure_positive_a=True) for x in x_points_a]

y_points_b = np.linspace(-20, 20, 200)
x_b, z_b = 0.0, 0.0
vz_b = [compute_induced_velocity(x_b, y, z_b, x1, y1, z1, x2, y2, z2) for y in y_points_b]

plt.figure(figsize=(12, 8))

plt.subplot(2, 1, 1)
plt.plot(x_points_a, vz_a, 'b-', label="Vz along y=5, z=0", linewidth=2)
plt.axhline(0, color="gray", linestyle="--", linewidth=0.8)
plt.title("Induced Vz Along x-Axis (Part a)", fontsize=14)
plt.xlabel("x-coordinate", fontsize=12)
plt.ylabel("Vz (z-component of velocity)", fontsize=12)
plt.grid(True, linestyle="--", alpha=0.7)
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(y_points_b, vz_b, 'g-', label="Vz along x=0, z=0", linewidth=2)
plt.axhline(0, color="gray", linestyle="--", linewidth=0.8)
plt.title("Induced Vz Along y-Axis (Part b)", fontsize=14)
plt.xlabel("y-coordinate", fontsize=12)
plt.ylabel("Vz (z-component of velocity)", fontsize=12)
plt.grid(True, linestyle="--", alpha=0.7)
plt.legend()

plt.tight_layout()
plt.show()
